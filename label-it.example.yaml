apiVersion: 1

# Github username and access token
# Recommend passing in an env variable by prefixing it with $
access:
  user: $GIT_USER
  token: $GIT_TOKEN

# Repository owner
owner: tanmancan

# Repository name
repo: label-it

# Provide a list of rules, that are grouped by labels
# If all rules in a group match a pull request,
# then the label will be added to the PR.
rules:

    # Label name. If all provided rules match,
    # then this label will be added to the pull request.
  - label: my-label-name

    # Rule type that compares the pull request head branch.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    head-rule:

      # Each rule types may have 4 possible checks. You can
      # provide one or more checks for a given rule type:
      # Exact - the rule value must be an exact match of the compare value.
      exact: master
      # NoExact - a rule value must NOT be an exact match of the compare value.
      no-exact: staging
      # Match - a regex pattern that must match a compare value.
      match: ^(mas)
      # NoMatch - a regex pattern that must NOT match a compare value
      no-match: ^(stag)

    # Rule type that compares the pull request base branch.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    base-rule:
      exact: master
      no-exact: staging
      match: ^(mas)
      no-match: ^(stag)

    # Rule type that compares the title text of the pull request.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    title-rule:
      exact: master
      no-exact: staging
      match: ^(mas)
      no-match: ^(stag)

    # Rule type that compares the body text of the pull request.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    body-rule:
      exact: master
      no-exact: staging
      match: ^(mas)
      no-match: ^(stag)

    # Rule type that compares the username of the account that opened the pull request.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    user-rule:
      exact: tanmancan
      no-exact: octocat
      match: ^(tan)
      no-match: ^(linus)

    # Rule type that compares the pull request number.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    number-rule:
      exact: 42
      no-exact: 10
      match: (100)|(200)|^(3)
      no-match: ^(5)|(600)

    # Rule type that compares paths of all changed files in a pr
    # Currently only supports testing the first 1000 files in a pr.
    # If your pull request is larger, it is recommended manually adding labels for now. In the future a larger file count may be supported.
    # Each rule type may have four checks: exact, no-exact, match, no-match.
    file-rule:
      # If an exact match is found in the list of file paths,
      # exact check will be considered valid
      exact: www/index.html
      # If a no exact match is found in the list of file paths,
      # no-exact check will be considered invalid
      no-exact: files/common/robots.text
      # If an regex pattern matches a path in the list of file paths,
      # then the match check will be considered valid
      match: (.jpg)$
      # If an regex pattern matches a path in the list of file paths,
      # then the no-match check will be considered invalid
      no-match: ^(readme.)

    # Rule type that compares the pull request updated date.
    # Only allows the `days-before` check.
    updated-rule:
      # The pull request date value must be this number of days before today.
      # In the example below, if the pull request was updated more than 14 days ago,
      # the check will pass.
      days-before: 14

    created-rule:
      # The pull request date value must be this number of days before today.
      # In the example below, if the pull request was updated more than 30 days ago,
      # the check will pass.
      days-before: 30

    # Examples:

    # If not rules are given, label
    # will be added to all pull requests
  - label: test

    # All rules must match for label to be added
  - label: All Rules Much Match
    # The pr head branch must exactly be "staging"
    head-rule:
      exact: staging
    # The pr base branch must not be "dev"
    base-rule:
      no-exact: dev
    # The pr title must be "Create"
    title-rule:
      exact: Create

    # Base rule, exact - If a pull request's base branch
    # is "master", the the label "To Master" will be added
  - label: To Master
    base-rule:
      exact: master

    # Head rule, no-exact - The pull request's head branch must not
    # be "staging", in order for the rule to be applied
  - label: From Staging
    head-rule:
      no-exact: staging

    # Head rule, match - This label will be applied if the pull request
    # head branch name starts with "pr-"
  - label: PR-* branch
    head-rule:
      match: ^(pr-)

    # Title rule, no-match - Any pull request that have the words
    # "text", "in", or "title" in its title, will not have this label applied.
  - label: Regex Title
    title-rule:
      no-match: (text)|(in)|(title)

    # The label "PR #5" will be added to pull request #5
  - label: "PR #5"
    number-rule:
      exact: 5

    # The label will be added if the user is not "tanmancan".
  - label: Tanmancan PR
    user-rule:
      no-exact: tanmancan

    # The label "BodyText" will be applied if the pull request contains
    # only the text "Hello World"
  - label: BodyText
    body-rule:
      exact: Hello World

    # The label Robots will be applied if the file
    # www/robots.txt has been modified din the pull request
  - label: Robots
    file-rule:
      exact: www/robots.txt
